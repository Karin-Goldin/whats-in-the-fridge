'use client';

import React, { useState } from 'react';
import {
	X,
	Plus,
	ChefHat,
	Trash2,
	Sparkles,
	Clock,
	Users,
	Star,
	ClipboardIcon,
	DownloadIcon,
} from 'lucide-react';

// Types
interface Recipe {
	id: string;
	name: string;
	time: string;
	servings: number;
	difficulty: 'Easy' | 'Medium' | 'Hard';
	ingredients: string[];
	description: string;
	instructions: string[];
	rating: number;
}

interface ApiRecipe {
	title: string;
	description: string;
	cookingTime: string;
	servings: number;
	ingredients: string[];
	instructions: string[];
}

const FridgeApp = () => {
	const [ingredients, setIngredients] = useState<string[]>([]);
	const [inputValue, setInputValue] = useState('');
	const [recipes, setRecipes] = useState<Recipe[]>([]);
	const [isGenerating, setIsGenerating] = useState(false);
	const [showRecipes, setShowRecipes] = useState(false);

	const addIngredient = () => {
		if (
			inputValue.trim() &&
			!ingredients.includes(inputValue.trim().toLowerCase())
		) {
			setIngredients([...ingredients, inputValue.trim().toLowerCase()]);
			setInputValue('');
		}
	};

	const removeIngredient = (ingredient: string) => {
		setIngredients(ingredients.filter((item) => item !== ingredient));
	};

	const generateRecipes = async () => {
		if (ingredients.length === 0) return;

		setIsGenerating(true);

		try {
			const response = await fetch('/api/recipes', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ ingredients }),
			});

			if (response.ok) {
				const data = await response.json();
				// Transform API response to match our Recipe interface
				const transformedRecipes = data.recipes.map(
					(recipe: ApiRecipe, index: number) => ({
						id: index.toString(),
						name: recipe.title,
						description: recipe.description,
						time: recipe.cookingTime,
						servings: recipe.servings,
						difficulty: 'Easy' as const,
						ingredients: recipe.ingredients,
						instructions: recipe.instructions,
						rating: 4.5,
					})
				);
				setRecipes(transformedRecipes);
				setShowRecipes(true);
			} else {
				// Handle API errors gracefully
				console.error('Failed to generate recipes');
			}
		} catch (error) {
			console.error('Error generating recipes:', error);
		} finally {
			setIsGenerating(false);
		}
	};

	const handleKeyPress = (e: React.KeyboardEvent) => {
		if (e.key === 'Enter') {
			addIngredient();
		}
	};

	const getMatchingIngredients = (recipeIngredients: string[]) => {
		return recipeIngredients.filter((ingredient) =>
			ingredients.some(
				(userIngredient) =>
					ingredient.toLowerCase().includes(userIngredient) ||
					userIngredient.includes(ingredient.toLowerCase())
			)
		).length;
	};

	const copyRecipe = async (recipe: Recipe) => {
		const recipeText = `${recipe.name}

Description: ${recipe.description}
Time: ${recipe.time}
Serves: ${recipe.servings}
Difficulty: ${recipe.difficulty}

INGREDIENTS:
${recipe.ingredients.map((ingredient) => `• ${ingredient}`).join('\n')}

INSTRUCTIONS:
${recipe.instructions.map((step, index) => `${index + 1}. ${step}`).join('\n')}

---
Generated by What's in the Fridge? App`;

		try {
			await navigator.clipboard.writeText(recipeText);
			// You could add a toast notification here
		} catch (err) {
			console.error('Failed to copy recipe:', err);
		}
	};

	const downloadRecipe = (recipe: Recipe) => {
		const recipeText = `${recipe.name}

Description: ${recipe.description}
Time: ${recipe.time}
Serves: ${recipe.servings}
Difficulty: ${recipe.difficulty}

INGREDIENTS:
${recipe.ingredients.map((ingredient) => `• ${ingredient}`).join('\n')}

INSTRUCTIONS:
${recipe.instructions.map((step, index) => `${index + 1}. ${step}`).join('\n')}

---
Generated by What's in the Fridge? App`;

		const blob = new Blob([recipeText], { type: 'text/plain' });
		const url = URL.createObjectURL(blob);
		const a = document.createElement('a');
		a.href = url;
		a.download = `${recipe.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
		URL.revokeObjectURL(url);
	};

	const renderStars = (rating: number) => {
		return Array.from({ length: 5 }, (_, i) => (
			<Star
				key={i}
				className={`w-4 h-4 ${
					i < Math.floor(rating)
						? 'text-yellow-400 fill-current'
						: 'text-gray-300'
				}`}
			/>
		));
	};

	if (showRecipes) {
		return (
			<div className='min-h-screen bg-gradient-to-br from-orange-50 to-red-50'>
				<div className='max-w-sm mx-auto px-4 py-6'>
					{/* Mobile Header */}
					<div className='flex items-center justify-between mb-6 pt-2'>
						<button
							onClick={() => setShowRecipes(false)}
							className='flex items-center gap-2 text-gray-600 hover:text-gray-800 transition-colors p-2 rounded-lg active:scale-95'
						>
							<X size={24} />
							<span className='font-medium'>Back</span>
						</button>
						<h1 className='text-lg font-bold text-gray-800'>AI Recipes</h1>
						<div className='w-16'></div> {/* Spacer for centering */}
					</div>

					{/* Mobile Recipe Cards */}
					<div className='space-y-4'>
						{recipes.map((recipe) => {
							const matchCount = getMatchingIngredients(recipe.ingredients);
							const matchPercentage = Math.round(
								(matchCount / recipe.ingredients.length) * 100
							);

							return (
								<div
									key={recipe.id}
									className='bg-white rounded-2xl shadow-lg p-5'
								>
									{/* Recipe Header */}
									<div className='flex items-start justify-between mb-3'>
										<h3 className='text-lg font-bold text-gray-800 flex-1 pr-3 leading-tight'>
											{recipe.name}
										</h3>
										<div
											className={`px-3 py-1 rounded-full text-xs font-bold flex-shrink-0 ${
												matchPercentage >= 80
													? 'bg-green-100 text-green-800'
													: matchPercentage >= 60
													? 'bg-yellow-100 text-yellow-800'
													: 'bg-red-100 text-red-800'
											}`}
										>
											{matchPercentage}%
										</div>
									</div>

									<p className='text-gray-600 mb-4 text-sm leading-relaxed'>
										{recipe.description}
									</p>

									{/* Recipe Meta */}
									<div className='flex items-center justify-between mb-4'>
										<div className='flex items-center gap-4 text-sm text-gray-500'>
											<div className='flex items-center gap-1'>
												<Clock size={16} />
												<span className='font-medium'>{recipe.time}</span>
											</div>
											<div className='flex items-center gap-1'>
												<Users size={16} />
												<span className='font-medium'>{recipe.servings}</span>
											</div>
										</div>
										<div className='flex items-center gap-1'>
											{renderStars(recipe.rating)}
										</div>
									</div>

									{/* Ingredients */}
									<div className='mb-4'>
										<p className='text-sm font-bold text-gray-800 mb-2'>
											Ingredients:
										</p>
										<div className='flex flex-wrap gap-2'>
											{recipe.ingredients.map((ingredient, index) => {
												const hasIngredient = ingredients.some(
													(userIngredient) =>
														ingredient.toLowerCase().includes(userIngredient) ||
														userIngredient.includes(ingredient.toLowerCase())
												);

												return (
													<span
														key={index}
														className={`px-3 py-1 rounded-full text-xs font-medium ${
															hasIngredient
																? 'bg-green-100 text-green-800 border border-green-200'
																: 'bg-gray-100 text-gray-600'
														}`}
													>
														{ingredient}
													</span>
												);
											})}
										</div>
									</div>

									{/* Instructions Preview */}
									{recipe.instructions && recipe.instructions.length > 0 && (
										<div className='mb-4'>
											<p className='text-sm font-bold text-gray-800 mb-2'>
												Instructions:
											</p>
											<div className='bg-gray-50 rounded-xl p-3 text-xs text-gray-600 max-h-32 overflow-y-auto'>
												{recipe.instructions.slice(0, 3).map((step, index) => (
													<div
														key={index}
														className='mb-2 last:mb-0 leading-relaxed'
													>
														<span className='font-bold text-orange-600'>
															{index + 1}.
														</span>{' '}
														{step}
													</div>
												))}
												{recipe.instructions.length > 3 && (
													<div className='text-gray-400 text-center mt-2'>
														+{recipe.instructions.length - 3} more steps...
													</div>
												)}
											</div>
										</div>
									)}

									{/* Mobile Action Buttons */}
									<div className='flex gap-3'>
										<button
											onClick={() => copyRecipe(recipe)}
											className='flex-1 bg-gray-100 text-gray-700 py-3 px-4 rounded-xl text-sm font-bold hover:bg-gray-200 transition-colors active:scale-95 flex items-center justify-center gap-2'
										>
											<ClipboardIcon size={18} />
											Copy
										</button>
										<button
											onClick={() => downloadRecipe(recipe)}
											className='flex-1 bg-gradient-to-r from-orange-500 to-red-500 text-white py-3 px-4 rounded-xl text-sm font-bold hover:from-orange-600 hover:to-red-600 transition-all duration-300 active:scale-95 flex items-center justify-center gap-2'
										>
											<DownloadIcon size={18} />
											Save
										</button>
									</div>
								</div>
							);
						})}
					</div>
				</div>
			</div>
		);
	}

	return (
		<div className='min-h-screen bg-gradient-to-br from-orange-50 to-red-50'>
			<div className='max-w-sm mx-auto px-4 py-6'>
				{/* Mobile Header */}
				<div className='text-center mb-8 pt-4'>
					<div className='flex items-center justify-center mb-4'>
						<div className='bg-white p-4 rounded-2xl shadow-lg'>
							<ChefHat size={36} className='text-orange-500' />
						</div>
					</div>
					<h1 className='text-3xl font-bold text-gray-800 mb-2 leading-tight'>
						What&apos;s in the Fridge?
					</h1>
					<p className='text-gray-600 text-base leading-relaxed px-2'>
						Add your ingredients and discover amazing recipes!
					</p>
				</div>

				{/* Mobile Input Section */}
				<div className='bg-white rounded-2xl shadow-lg p-5 mb-6'>
					<h2 className='text-xl font-bold text-gray-800 mb-4'>
						Your Ingredients
					</h2>

					{/* Mobile Input */}
					<div className='space-y-3 mb-6'>
						<input
							type='text'
							value={inputValue}
							onChange={(e) => setInputValue(e.target.value)}
							onKeyPress={handleKeyPress}
							placeholder='Type an ingredient...'
							className='w-full px-4 py-4 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition-all duration-300 text-base'
						/>
						<button
							onClick={addIngredient}
							className='w-full bg-gradient-to-r from-orange-500 to-red-500 text-white py-4 rounded-xl hover:from-orange-600 hover:to-red-600 transition-all duration-300 active:scale-95 flex items-center justify-center gap-2 font-bold text-base'
						>
							<Plus size={20} />
							Add Ingredient
						</button>
					</div>

					{/* Mobile Ingredients List */}
					{ingredients.length > 0 ? (
						<div className='space-y-4'>
							<div className='space-y-3'>
								{ingredients.map((ingredient, index) => (
									<div
										key={index}
										className='flex items-center justify-between bg-gradient-to-r from-orange-100 to-red-100 px-4 py-3 rounded-xl border border-orange-200'
									>
										<span className='text-gray-800 capitalize font-medium text-base'>
											{ingredient}
										</span>
										<button
											onClick={() => removeIngredient(ingredient)}
											className='text-red-500 hover:text-red-700 transition-colors p-1 active:scale-95'
										>
											<Trash2 size={20} />
										</button>
									</div>
								))}
							</div>

							<div className='text-center pt-2'>
								<p className='text-gray-600 text-base'>
									<span className='font-bold text-orange-600'>
										{ingredients.length}
									</span>{' '}
									ingredient{ingredients.length !== 1 ? 's' : ''} ready to cook!
									🍳
								</p>
							</div>
						</div>
					) : (
						<div className='text-center py-8'>
							<Sparkles className='mx-auto mb-4 text-gray-400' size={48} />
							<p className='text-gray-500 text-base leading-relaxed'>
								No ingredients yet.
								<br />
								Start adding what you have!
							</p>
						</div>
					)}
				</div>

				{/* Mobile Generate Button */}
				{ingredients.length > 0 && (
					<div className='pb-6'>
						<button
							onClick={generateRecipes}
							disabled={isGenerating}
							className='w-full bg-gradient-to-r from-orange-500 to-red-500 text-white py-5 rounded-2xl font-bold text-lg hover:from-orange-600 hover:to-red-600 transition-all duration-300 active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3 shadow-lg'
						>
							{isGenerating ? (
								<>
									<div className='animate-spin rounded-full h-6 w-6 border-b-2 border-white'></div>
									Generating Magic...
								</>
							) : (
								<>
									<ChefHat size={24} />
									Generate AI Recipes
								</>
							)}
						</button>
					</div>
				)}
			</div>
		</div>
	);
};

export default FridgeApp;
